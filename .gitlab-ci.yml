include:
  - local: 'ci-templates.yml'
  - template: 'Security/SAST.gitlab-ci.yml'
  - template: 'Security/Dependency-Scanning.gitlab-ci.yml'
  - template: 'Security/Container-Scanning.gitlab-ci.yml'
  - template: 'Security/DAST.gitlab-ci.yml'

variables:
  SERVICE_PATH: pitstop-customer
  SERVICE_NAME: pitstop-customer
  DOCKER_USERNAME: fatemzahra
  DOCKER_IMAGE: fatemzahra/pitstop-customer
  GITHUB_REPO: fatemzahrae/Customer-KubernetesFiles
  GITHUB_REPO_NAME: Customer-KubernetesFiles
  GITLAB_REPO: aseds6001802/customer-kubernetesfiles
 
stages:
  - pre-commit
  - sast
  - sca
  - build
  - container_security
  - push
  - deploy
  - expose
  - dast

pre-commit:
  image: python:3.9
  stage: pre-commit
  before_script:
    - pip install pre-commit
  script:
    - pre-commit install
    - git config --global user.email "ci@bot.com"
    - git config --global user.name "CI Bot"        
    - pre-commit run --all-files || (git add . && git commit -m "Fix pre-commit issues")
    - pre-commit run --all-files || (git add . && git commit -m "Fix pre-commit issues")
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'

sast:
  stage: sast
  artifacts:
    reports:
      sast: gl-sast-report.json
  allow_failure: false

dependency_scanning:
  stage: sca
  script:
    - echo "Running Dependency Scanning"
  artifacts:
    reports:
      dependency_scanning: sca-results.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request" || $CI_COMMIT_BRANCH == "main"

build:
  extends: .build-template
  needs:
    - pre-commit

container_scanning:
  tags:
    - gitlab-org-docker
  image: registry.gitlab.com/security-products/container-scanning:latest
  services:
    - docker:dind
  stage: container_security
  dependencies:
    - build
  variables:
    GIT_STRATEGY: fetch
    DOCKER_TLS_CERTDIR: ""
    USER: root
    DOCKER_HOST: "tcp://docker:2375"
    SECURE_LOG_LEVEL: debug
  before_script:

    - sudo apt-get update -qq
    - sudo apt-get install -qq -y docker.io
    - docker load < images/image.tar
    - TAG=$(docker images | grep "$DOCKER_IMAGE" | awk '{print $2}')
    - export CS_IMAGE="${DOCKER_IMAGE}:${TAG}"
  script:
    - gtcs scan "$CS_IMAGE"

  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
    paths:
      - gl-container-scanning-report.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request" || $CI_COMMIT_BRANCH == "main"


push:
  extends: .push-template
  needs:
    - build

deploy:
  extends: .deploy-template
  needs:
    - push

expose:
  stage: expose
  image: alpine:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl wget jq
    - wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
    - unzip ngrok-stable-linux-amd64.zip
    - mv ngrok /usr/local/bin/ngrok
  script:
    - docker run -d --name ${SERVICE_NAME} -p 8080:8080 ${DOCKER_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - ngrok authtoken $NGROK_AUTH_TOKEN
    - ngrok http 8080 > /dev/null &
    - sleep 5
    - NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
    - echo $NGROK_URL > ngrok-url.txt
  artifacts:
    paths:
      - ngrok-url.txt
    expire_in: 1 hour
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

dast:
  stage: dast
  dependencies:
    - expose
  variables:
    DAST_WEBSITE: "$(cat ngrok-url.txt)"
  script:
    - echo "Running DAST scan on $DAST_WEBSITE"
  artifacts:
    reports:
      dast: gl-dast-report.json


