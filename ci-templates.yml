.vault-config: &vault-config
  before_script:
    - apk add --no-cache curl jq unzip
    - |
      # Install Vault client
      curl -o vault.zip https://releases.hashicorp.com/vault/1.13.0/vault_1.13.0_linux_amd64.zip
      unzip vault.zip
      mv vault /usr/local/bin/
      # Set Vault environment variables
      export VAULT_ADDR="${VAULT_ADDR}"
      export VAULT_TOKEN="${VAULT_TOKEN}"
      # Debugging to verify Vault address
      echo "VAULT_ADDR is set to: $VAULT_ADDR"
      # Authenticate with Vault
      vault login $VAULT_TOKEN
      # Fetch secrets from Vault
      export DOCKER_USERNAME="$(vault kv get -field=DOCKER_USERNAME secret/pitstopsecrets)"
      export DOCKER_HUB_PASSWORD="$(vault kv get -field=DOCKER_HUB_PASSWORD secret/pitstopsecrets)"
      export GITHUB_TOKEN="$(vault kv get -field=GITHUB_TOKEN secret/pitstopsecrets)"
      export GITLAB_TOKEN="$(vault kv get -field=GITLAB_TOKEN secret/pitstopsecrets)"
      
.build-template:
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  <<: *vault-config
  stage: build
  script:
    - cd ${SERVICE_PATH}
    - docker build -t ${DOCKER_IMAGE}:$CI_COMMIT_SHORT_SHA .
    - cd ..
    - mkdir -p images
    - docker save ${DOCKER_IMAGE}:$CI_COMMIT_SHORT_SHA > images/image.tar
  artifacts:
    paths:
      - images/image.tar
    expire_in: 1 hour
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
    - when: never

.push-template:
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  <<: *vault-config
  stage: push
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin

   # - echo "$DOCKER_HUB_PASSWORD" | docker login -u "${DOCKER_USERNAME}" --password-stdin
    - docker load < images/image.tar
    - docker push ${DOCKER_IMAGE}:$CI_COMMIT_SHORT_SHA
    - |
      if [ "$CI_COMMIT_BRANCH" == "main" ]; then
        docker tag ${DOCKER_IMAGE}:$CI_COMMIT_SHORT_SHA ${DOCKER_IMAGE}:latest
        docker push ${DOCKER_IMAGE}:latest
      fi
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

.deploy-template:
  stage: deploy
  image: alpine:latest
  variables:
    GIT_STRATEGY: clone
  <<: *vault-config
  before_script:
    - apk add --no-cache git curl
    - curl -sSL -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
    - chmod +x /usr/local/bin/yq
    - git config --global user.email "gitlab-ci@example.com"
    - git config --global user.name "GitLab CI"
  script:
    - git clone "https://${GITHUB_TOKEN}@github.com/${GITHUB_REPO}.git"
    - cd ${GITHUB_REPO_NAME}/k8s
    - yq e -i 'select(.kind == "Deployment").spec.template.spec.containers[] |= select(.name == "'${SERVICE_NAME}'").image = "'${DOCKER_IMAGE}':'$CI_COMMIT_SHORT_SHA'"' ${SERVICE_NAME}-depl.yaml
    - git add .
    - git commit -m "Update image tag to $CI_COMMIT_SHORT_SHA [skip ci]"
    - git push "https://${GITHUB_TOKEN}@github.com/${GITHUB_REPO}.git" HEAD:main
    - cd ..
    - git remote add gitlab "https://oauth2:${GITLAB_TOKEN}@gitlab.com/${GITLAB_REPO}.git"
    - git fetch gitlab main
    - git merge gitlab/main --no-edit
    - git push gitlab main
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
